generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  emailVerified    DateTime?       @map("email_verified")
  image            String?
  password         String?
  role             UserRole        @default(EDITOR)
  status           UserStatus      @default(PENDING)
  firstName        String?         @map("first_name")
  lastName         String?         @map("last_name")
  bio              String?
  timezone         String?         @default("America/Mexico_City")
  locale           String?         @default("es-MX")
  aiBudgetLimit    Float?          @default(100.0) @map("ai_budget_limit")
  aiUsageMonth     Float           @default(0.0) @map("ai_usage_month")
  canExport        Boolean         @default(true) @map("can_export")
  canCollaborate   Boolean         @default(true) @map("can_collaborate")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  lastLoginAt      DateTime?       @map("last_login_at")
  createdBy        String?         @map("created_by")
  resetToken       String?         @map("reset_token")
  resetTokenExpiry DateTime?       @map("reset_token_expiry")
  accounts         Account[]
  aiUsage          AIUsageLog[]
  auditLogs        AuditLog[]
  beatLocks        BeatLock[]
  comments         Comment[]
  notifications    Notification[]
  ownedProjects    Pelicula[]      @relation("ProjectOwner")
  assignedProjects ProjectMember[]
  sessions         Session[]

  @@map("users")
}

model Pelicula {
  id               String           @id @default(cuid())
  titulo           String
  subtitulo        String?
  genero           String
  sinopsis         String?
  logline          String?
  duracionMinutos  Int              @default(110) @map("duracion_minutos")
  targetPlatform   TargetPlatform   @default(THEATRICAL) @map("target_platform")
  contextoCultural ContextoCultural @default(MEXICO) @map("contexto_cultural")
  status           ProjectStatus    @default(BORRADOR)
  presupuestoIA    Float            @default(500.0) @map("presupuesto_ia")
  gastoIAActual    Float            @default(0.0) @map("gasto_ia_actual")
  blakeSnyderValid Boolean          @default(false) @map("blake_snyder_valid")
  estructuraNotas  Json?            @map("estructura_notas")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  ownerId          String           @map("owner_id")
  aiUsage          AIUsageLog[]
  auditLogs        AuditLog[]
  capas            Capa[]
  comments         Comment[]
  exports          ExportHistory[]
  owner            User             @relation("ProjectOwner", fields: [ownerId], references: [id])
  members          ProjectMember[]

  @@map("peliculas")
}

model ProjectMember {
  id          String   @id @default(cuid())
  peliculaId  String   @map("pelicula_id")
  userId      String   @map("user_id")
  role        String
  permissions Json?
  addedAt     DateTime @default(now()) @map("added_at")
  pelicula    Pelicula @relation(fields: [peliculaId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([peliculaId, userId])
  @@map("project_members")
}

model Capa {
  id              String   @id @default(cuid())
  numero          Int
  titulo          String
  descripcion     String?
  tipo            CapaTipo
  blakeSnyderBeat String   @map("blake_snyder_beat")
  paginaInicio    Int      @map("pagina_inicio")
  paginaFin       Int      @map("pagina_fin")
  minutoInicio    Int      @map("minuto_inicio")
  minutoFin       Int      @map("minuto_fin")
  peliculaId      String   @map("pelicula_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  pelicula        Pelicula @relation(fields: [peliculaId], references: [id], onDelete: Cascade)
  minutos         Minuto[]

  @@unique([peliculaId, numero])
  @@map("capas")
}

model Minuto {
  id               String   @id @default(cuid())
  numero           Int
  titulo           String
  descripcion      String?
  duracionSegundos Int      @default(60) @map("duracion_segundos")
  tensionNivel     Int      @default(5) @map("tension_nivel")
  ritmo            String?
  capaId           String   @map("capa_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  beats            Beat[]
  capa             Capa     @relation(fields: [capaId], references: [id], onDelete: Cascade)

  @@unique([capaId, numero])
  @@map("minutos")
}

model Beat {
  id              String    @id @default(cuid())
  numero          Int
  titulo          String
  contenido       String
  palabras        Int       @default(0)
  palabrasValidas Boolean   @default(false) @map("palabras_validas")
  tipo            BeatTipo  @default(ACCION)
  personajes      String[]
  emociones       String[]
  conflicto       String?
  generadoPorIA   Boolean   @default(false) @map("generado_por_ia")
  aiProvider      String?   @map("ai_provider")
  promptUsado     String?   @map("prompt_usado")
  costoIA         Float?    @default(0.0) @map("costo_ia")
  minutoId        String    @map("minuto_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  createdBy       String?   @map("created_by")
  locks           BeatLock?
  minuto          Minuto    @relation(fields: [minutoId], references: [id], onDelete: Cascade)
  comments        Comment[]

  @@unique([minutoId, numero])
  @@map("beats")
}

model BeatLock {
  id        String   @id @default(cuid())
  beatId    String   @unique @map("beat_id")
  userId    String   @map("user_id")
  lockedAt  DateTime @default(now()) @map("locked_at")
  expiresAt DateTime @map("expires_at")
  beat      Beat     @relation(fields: [beatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("beat_locks")
}

model Comment {
  id         String    @id @default(cuid())
  contenido  String
  tipo       String?
  resolved   Boolean   @default(false)
  peliculaId String?   @map("pelicula_id")
  beatId     String?   @map("beat_id")
  userId     String    @map("user_id")
  parentId   String?   @map("parent_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  beat       Beat?     @relation(fields: [beatId], references: [id], onDelete: Cascade)
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")
  pelicula   Pelicula? @relation(fields: [peliculaId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model AIUsageLog {
  id             String    @id @default(cuid())
  provider       String
  model          String?
  prompt         String
  response       String
  tokensInput    Int       @map("tokens_input")
  tokensOutput   Int       @map("tokens_output")
  costo          Float
  tiempoProceso  Float     @map("tiempo_proceso")
  calidadScore   Float?    @map("calidad_score")
  tipoContenido  String    @map("tipo_contenido")
  nivelJerarquia String    @map("nivel_jerarquia")
  userId         String    @map("user_id")
  peliculaId     String?   @map("pelicula_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  pelicula       Pelicula? @relation(fields: [peliculaId], references: [id])
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_usage_logs")
}

model ExportHistory {
  id           String    @id @default(cuid())
  formato      String
  fileName     String    @map("file_name")
  fileSize     Int?      @map("file_size")
  status       String    @default("processing")
  errorMessage String?   @map("error_message")
  downloadUrl  String?   @map("download_url")
  expiresAt    DateTime? @map("expires_at")
  peliculaId   String    @map("pelicula_id")
  userId       String    @map("user_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  completedAt  DateTime? @map("completed_at")
  pelicula     Pelicula  @relation(fields: [peliculaId], references: [id], onDelete: Cascade)

  @@map("export_history")
}

model AuditLog {
  id         String    @id @default(cuid())
  action     String
  entity     String
  entityId   String    @map("entity_id")
  oldValues  Json?     @map("old_values")
  newValues  Json?     @map("new_values")
  ipAddress  String?   @map("ip_address")
  userAgent  String?   @map("user_agent")
  userId     String?   @map("user_id")
  peliculaId String?   @map("pelicula_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  pelicula   Pelicula? @relation(fields: [peliculaId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Notification {
  id         String    @id @default(cuid())
  titulo     String
  mensaje    String
  tipo       String
  icono      String?
  leida      Boolean   @default(false)
  archivada  Boolean   @default(false)
  actionUrl  String?   @map("action_url")
  actionText String?   @map("action_text")
  userId     String    @map("user_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  readAt     DateTime? @map("read_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("system_config")
}

enum UserRole {
  SUPER_ADMIN
  DIRECTOR
  SUPERVISOR
  EDITOR
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum ProjectStatus {
  BORRADOR
  REVISION
  APROBADO
  PRODUCCION
  COMPLETADO
  ARCHIVADO
}

enum ContextoCultural {
  MEXICO
  LATAM
  GLOBAL
}

enum TargetPlatform {
  THEATRICAL
  DRAMABOX
  REELSHORT
  STREAMING
  NETFLIX
  AMAZON_PRIME
}

enum CapaTipo {
  OPENING_IMAGE
  THEME_STATED
  SETUP
  CATALYST
  DEBATE
  BREAK_INTO_TWO
  B_STORY
  FUN_AND_GAMES
  MIDPOINT
  BAD_GUYS_CLOSE_IN
  ALL_IS_LOST
  DARK_NIGHT_SOUL
  BREAK_INTO_THREE
  FINALE
  FINAL_IMAGE
}

enum BeatTipo {
  ACCION
  DIALOGO
  DESCRIPCION
  TRANSICION
  MONTAJE
}
